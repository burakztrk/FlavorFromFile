import java.nio.charset.StandardCharsets

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


task createFlavors{

    ext.readVariantsDirectoryAndCreateFlavors ={
        fileTree("variants").visit { FileVisitDetails details ->
            if (details.file.name.endsWith('.properties'))
            {
                Properties props = readPropertiesFile(details.file.path)
                if (props !=null && props.containsKey('APP_ID'))
                {
                    String flavorName = props['APP_ID']
                    def newFlavor = android.productFlavors.create(flavorName)
                    println("> ${flavorName} -> Flavor Created")
                    setFlavorProperties(newFlavor , props)
                }
                else
                    println(">> ${details.file.name} -> FLAVOR FORMAT ERROR")
            }
            else
                println(">> ${details.file.name} -> WRONG FILE EXTENSION")
        }
    }

    ext.readPropertiesFile ={ flavorFileName ->
        Properties props = new Properties()
        def propFile = project.file(flavorFileName)
        if (!propFile.canRead()){
            println ">> ${flavorFileName} Not Readable"
            return null
        }

        props.load(new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8));
        if(props ==null){
            println ">> ${flavorFileName} Not Opened"
            return null
        }

        return props
    }

    ext.setFlavorProperties={flavor,props ->
        flavor.buildConfigField("String", "APP_ID", "\"${props['APP_ID']}\"")   //APPID flavorlarÄ±n isimleri appIdlerden set ediliyor //MainActivity icerisindeki textViewin degeri buradan ataniyor    //BuildConfig.java classina ,Tipi String, adi APP_ID, degeri flavor_xxx.properties.APP_ID den alinan degisken tanimla
        flavor.resValue "string", "app_name", props['APP_LABEL']        //Uygulamanin adi buradan ataniyor.Tanimlamasi manifestten yapiliyor
        flavor.resValue "color", "bg_color" , props['BG_COLOR']         //generated.xml icerisinde strings.xmldeki gibi kullanabilecegimiz string tipinde adi app_name  degeri flavor_xxx.properties.APP_LABEL den alinan string resource tanimla

        flavor.signingConfig android.signingConfigs.findByName(flavor.getName()) //Imza dosyalarinin eklenmesi
    }

    readVariantsDirectoryAndCreateFlavors()
}

android {

    flavorDimensions "default"


    compileSdkVersion 28
    defaultConfig {
        applicationId "com.corbone.test"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        earth {
            keyAlias 'Alias'
            keyPassword 'KeyPass'
            storeFile file('KeyStorePath')
            storePassword 'StorePass'
        }
        mars {
            keyAlias 'Alias'
            keyPassword 'KeyPass'
            storeFile file('KeyStorePath')
            storePassword 'StorePass'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

